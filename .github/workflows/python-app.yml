name: Python application CI

on:
  # Keep existing triggers for PRs and direct pushes, but add path filters
  push:
    branches: [ "master" ]
    paths:
      - '*.py' # Python files in root
      - 'root/**/*.py' # Python files in root directory tree
      - 'requirements.txt' # Main requirements file
      - 'requirements-dev.txt' # Development requirements file
      - 'release-versions/**' # Version files that affect builds
      - '.github/workflows/python-app.yml' # Run if the workflow itself changes
  pull_request:
    branches: [ "master" ]
    paths:
      - '*.py'
      - 'root/**/*.py'
      - 'requirements.txt'
      - 'requirements-dev.txt'
      - 'release-versions/**'
      - '.github/workflows/python-app.yml'
  # workflow_call trigger remains unchanged and runs whenever called
  workflow_call:
    inputs:
      commit_sha:
        description: 'The specific commit SHA to checkout and test'
        required: true
        type: string

permissions:
  contents: read # Needed to checkout the code

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        # Checkout the specific SHA if triggered by workflow_call, otherwise default behavior
        ref: ${{ github.event_name == 'workflow_call' && inputs.commit_sha || github.ref }}

    - name: Setup Python Environment
      uses: ./.github/actions/setup-python
      with:
        python-version: "3.12"
        install-fanficfare: "false"  # Not needed for pre-commit
        install-dev-tools: "true"
        requirements-file: "requirements-dev.txt"  # Need dev dependencies for pre-commit

    - name: Run pre-commit hooks
      run: |
        echo "Installing pre-commit..."
        pip install pre-commit
        echo "Running pre-commit on all files..."
        pre-commit run --all-files

  lint:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        # Checkout the specific SHA if triggered by workflow_call, otherwise default behavior
        ref: ${{ github.event_name == 'workflow_call' && inputs.commit_sha || github.ref }}

    - name: Setup Python Environment
      uses: ./.github/actions/setup-python
      with:
        python-version: "3.12"
        install-fanficfare: "false"  # Not needed for linting
        install-dev-tools: "true"
        requirements-file: "requirements.txt"  # Only runtime dependencies needed for linting

    - name: Lint with flake8
      run: |
        echo "Running flake8 checks..."
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        echo "Flake8 checks complete."

  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        # Checkout the specific SHA if triggered by workflow_call, otherwise default behavior
        ref: ${{ github.event_name == 'workflow_call' && inputs.commit_sha || github.ref }}

    - name: Setup Python Environment
      uses: ./.github/actions/setup-python
      with:
        python-version: "3.12"
        install-fanficfare: "true"
        install-dev-tools: "true"
        requirements-file: "requirements-dev.txt"  # Need dev dependencies for testing

    - name: Test with pytest
      id: pytest
      run: |
        echo "Discovering Python test files..."
        find . -name "*_test.py" -o -name "test_*.py" | head -10

        echo "Running pytest..."
        # Create directory for test results if it doesn't exist
        mkdir -p junit

        # Run pytest with verbose output and capture results, excluding CI-flaky tests
        pytest --junitxml=junit/test-results.xml --verbose --tb=short -m "not flaky_ci"

        # Verify test results were generated
        if [ -f junit/test-results.xml ]; then
          echo "Test results saved to junit/test-results.xml"
          # Show basic test summary from XML
          if command -v xmllint &> /dev/null; then
            TESTS=$(xmllint --xpath "string(//testsuite/@tests)" junit/test-results.xml 2>/dev/null || echo "unknown")
            FAILURES=$(xmllint --xpath "string(//testsuite/@failures)" junit/test-results.xml 2>/dev/null || echo "unknown")
            ERRORS=$(xmllint --xpath "string(//testsuite/@errors)" junit/test-results.xml 2>/dev/null || echo "unknown")
            echo "Test Summary: $TESTS tests run, $FAILURES failures, $ERRORS errors"
          fi
        else
          echo "::warning::Test results XML was not generated"
        fi

    - name: Upload pytest test results
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results-3.12
        path: junit/test-results.xml
      # Always run this step to upload results even if tests fail
      if: always()

  # Summary job that depends on pre-commit, lint and test
  build:
    needs: [pre-commit, lint, test]
    runs-on: ubuntu-latest
    steps:
    - name: All checks passed
      run: echo "All CI checks completed successfully"
