name: Auto-merge Dependabot PRs

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: write

jobs:
  auto-merge:
    # Only run on Dependabot PRs
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup GitHub CLI
        run: |
          # GitHub CLI is pre-installed on GitHub runners
          gh --version

      - name: Determine required CI checks
        id: determine-checks
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          echo "Determining which CI checks are required based on changed files..."

          # Get list of changed files in the PR
          changed_files=$(gh pr view $PR_NUMBER --json files --jq '.files[].path')
          echo "Changed files:"
          echo "$changed_files"

          # Initialize required checks array
          required_checks=()

          # Check if Python-related files were changed (triggers python-app.yml workflow)
          python_changed=false
          while IFS= read -r file; do
            if [[ "$file" =~ \.py$ ]] || \
               [[ "$file" =~ ^root/.*\.py$ ]] || \
               [[ "$file" == "requirements.txt" ]] || \
               [[ "$file" == "requirements-dev.txt" ]] || \
               [[ "$file" =~ ^release-versions/ ]] || \
               [[ "$file" == ".github/workflows/python-app.yml" ]]; then
              python_changed=true
              break
            fi
          done <<< "$changed_files"

          # Add Python CI checks if Python-related files changed
          if [ "$python_changed" = true ]; then
            required_checks+=("pre-commit" "lint" "test" "build")
            echo "✅ Python files changed - will wait for Python CI checks"
          else
            echo "ℹ️  No Python files changed - skipping Python CI checks"
          fi

          # Check if Docker-related files were changed (triggers docker-image.yml workflow)
          docker_changed=false
          while IFS= read -r file; do
            if [[ "$file" == "Dockerfile" ]] || \
               [[ "$file" == ".github/workflows/docker-image.yml" ]] || \
               [[ "$file" =~ ^release-versions/ ]]; then
              docker_changed=true
              break
            fi
          done <<< "$changed_files"

          # Add Docker CI checks if Docker-related files changed
          if [ "$docker_changed" = true ]; then
            # Note: docker-image.yml jobs are conditional and may not always run
            echo "ℹ️  Docker-related files changed - Docker workflow may run conditionally"
          fi

          # Convert array to comma-separated string for output
          if [ ${#required_checks[@]} -eq 0 ]; then
            echo "checks=" >> $GITHUB_OUTPUT
            echo "ℹ️  No CI checks required for this change"
          else
            IFS=',' eval 'checks_string="${required_checks[*]}"'
            echo "checks=$checks_string" >> $GITHUB_OUTPUT
            echo "✅ Required checks: ${required_checks[*]}"
          fi

      - name: Wait for CI checks to complete
        if: steps.determine-checks.outputs.checks != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_SHA: ${{ github.event.pull_request.head.sha }}
          REQUIRED_CHECKS: ${{ steps.determine-checks.outputs.checks }}
        run: |
          echo "Waiting for CI checks to complete on SHA: $PR_SHA"

          # Convert comma-separated string back to array
          IFS=',' read -ra checks_array <<< "$REQUIRED_CHECKS"

          echo "Required checks: ${checks_array[*]}"

          # Wait for all required checks to complete successfully
          for check in "${checks_array[@]}"; do
            echo "Waiting for check: $check"

            # Wait up to 30 minutes for this check
            timeout=1800
            interval=30
            elapsed=0

            while [ $elapsed -lt $timeout ]; do
              # Get the status of this specific check
              status=$(gh api repos/${{ github.repository }}/commits/$PR_SHA/check-runs \
                --jq ".check_runs[] | select(.name == \"$check\") | .status" 2>/dev/null || echo "")

              conclusion=$(gh api repos/${{ github.repository }}/commits/$PR_SHA/check-runs \
                --jq ".check_runs[] | select(.name == \"$check\") | .conclusion" 2>/dev/null || echo "")

              if [ "$status" = "completed" ]; then
                if [ "$conclusion" = "success" ]; then
                  echo "✅ Check '$check' completed successfully"
                  break
                else
                  echo "❌ Check '$check' failed with conclusion: $conclusion"
                  exit 1
                fi
              else
                echo "⏳ Check '$check' is still running (status: $status)..."
                sleep $interval
                elapsed=$((elapsed + interval))
              fi
            done

            if [ $elapsed -ge $timeout ]; then
              echo "❌ Timeout waiting for check: $check"
              exit 1
            fi
          done

          echo "✅ All required CI checks passed!"

      - name: Skip CI checks notification
        if: steps.determine-checks.outputs.checks == ''
        run: |
          echo "ℹ️  No CI checks required for this change - proceeding with auto-merge"

      - name: Check if PR is ready for auto-merge
        id: check-pr
        run: |
          # Get PR details
          PR_NUMBER=${{ github.event.pull_request.number }}

          # Check if PR is ready (not draft)
          if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "reason=Draft PR" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if PR has merge conflicts
          MERGEABLE="${{ github.event.pull_request.mergeable }}"
          if [ "$MERGEABLE" = "false" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "reason=Merge conflicts" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Check if this is a dependency update PR
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ "$PR_TITLE" =~ ^deps ]]; then
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Auto-merge eligible: $PR_TITLE"
          else
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "reason=Not a dependency update" >> $GITHUB_OUTPUT
          fi

      - name: Determine version bump type
        if: steps.check-pr.outputs.skip != 'true'
        id: bump-type
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"

          # Use environment variable to safely handle PR body with special characters
          # Check for security updates for special labeling
          if echo "$PR_TITLE $PR_BODY_CONTENT" | grep -qi "security\|vulnerability\|CVE"; then
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "bump_reason=security" >> $GITHUB_OUTPUT
            echo "🔒 Security update detected - patch version bump"
          # All other dependency updates are treated as regular patches
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "bump_reason=dependency" >> $GITHUB_OUTPUT
            echo "📦 Dependency update detected - patch version bump"
          fi
        env:
          PR_BODY_CONTENT: ${{ github.event.pull_request.body }}

      - name: Bump version for dependency updates
        if: steps.check-pr.outputs.skip != 'true'
        id: version-bump
        uses: ./.github/actions/bump-version
        with:
          bump-type: ${{ steps.bump-type.outputs.bump_type }}
          reason: ${{ steps.bump-type.outputs.bump_reason }}

      - name: Commit version bump
        if: steps.check-pr.outputs.skip != 'true' && steps.version-bump.outputs.version-changed == 'true'
        id: commit-bump
        run: |
          # Configure git for commits
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          # Create commit message based on bump reason
          BUMP_REASON="${{ steps.bump-type.outputs.bump_reason }}"
          NEW_VERSION="${{ steps.version-bump.outputs.new-version }}"
          case "$BUMP_REASON" in
            "security")
              COMMIT_MSG="chore: bump version to $NEW_VERSION for security updates"
              ;;
            *)
              COMMIT_MSG="chore: bump version to $NEW_VERSION for dependency updates"
              ;;
          esac

          # Commit version bump
          git add release-versions/latest.txt root/app/fanficdownload.py
          git commit -m "$COMMIT_MSG"

          # Push the version bump to the PR branch
          git push origin HEAD

          # Get the new commit SHA
          NEW_SHA=$(git rev-parse HEAD)
          echo "new_sha=$NEW_SHA" >> $GITHUB_OUTPUT

      - name: Wait for CI checks on version bump commit
        if: steps.check-pr.outputs.skip != 'true' && steps.version-bump.outputs.version-changed == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_SHA: ${{ steps.commit-bump.outputs.new_sha }}
          REQUIRED_CHECKS: ${{ steps.determine-checks.outputs.checks }}
        run: |
          echo "Waiting for CI checks to complete on version bump commit: $PR_SHA"

          # Convert comma-separated string back to array
          IFS=',' read -ra checks_array <<< "$REQUIRED_CHECKS"

          echo "Required checks: ${checks_array[*]}"

          # Wait for all required checks to complete successfully
          for check in "${checks_array[@]}"; do
            echo "Waiting for check: $check"

            # Wait up to 30 minutes for this check
            timeout=1800
            interval=30
            elapsed=0

            while [ $elapsed -lt $timeout ]; do
              # Get the status of this specific check
              status=$(gh api repos/${{ github.repository }}/commits/$PR_SHA/check-runs \
                --jq ".check_runs[] | select(.name == \"$check\") | .status" 2>/dev/null || echo "")

              conclusion=$(gh api repos/${{ github.repository }}/commits/$PR_SHA/check-runs \
                --jq ".check_runs[] | select(.name == \"$check\") | .conclusion" 2>/dev/null || echo "")

              if [ "$status" = "completed" ]; then
                if [ "$conclusion" = "success" ]; then
                  echo "✅ Check '$check' completed successfully"
                  break
                else
                  echo "❌ Check '$check' failed with conclusion: $conclusion"
                  exit 1
                fi
              else
                echo "⏳ Check '$check' is still running (status: $status)..."
                sleep $interval
                elapsed=$((elapsed + interval))
              fi
            done

            if [ $elapsed -ge $timeout ]; then
              echo "❌ Timeout waiting for check: $check"
              exit 1
            fi
          done

          echo "✅ All required CI checks passed on version bump commit!"

      - name: Enable auto-merge for Dependabot PRs
        if: steps.check-pr.outputs.skip != 'true'
        run: |
          # Enable auto-merge on the PR
          gh pr merge --auto --squash "${{ github.event.pull_request.number }}"
          echo "✅ Auto-merge enabled for PR #${{ github.event.pull_request.number }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add auto-merge comment
        if: steps.check-pr.outputs.skip != 'true'
        run: |
          BUMP_REASON="${{ steps.bump-type.outputs.bump_reason }}"
          BUMP_TYPE="${{ steps.bump-type.outputs.bump_type }}"
          OLD_VERSION="${{ steps.version-bump.outputs.old-version }}"
          NEW_VERSION="${{ steps.version-bump.outputs.new-version }}"
          VERSION_CHANGED="${{ steps.version-bump.outputs.version-changed }}"
          REQUIRED_CHECKS="${{ steps.determine-checks.outputs.checks }}"

          case "$BUMP_REASON" in
            "security")
              BUMP_ICON="🔒"
              BUMP_DESC="Security update"
              ;;
            *)
              BUMP_ICON="📦"
              BUMP_DESC="Dependency update"
              ;;
          esac

          VERSION_INFO=""
          if [ "$VERSION_CHANGED" == "true" ]; then
            VERSION_INFO="- $BUMP_ICON **$BUMP_DESC**: Version bumped from \`$OLD_VERSION\` → \`$NEW_VERSION\` (\`$BUMP_TYPE\` version bump)"
          else
            VERSION_INFO="- $BUMP_ICON **$BUMP_DESC**: Version remains \`$OLD_VERSION\` (no change needed)"
          fi

          # Build checks info based on what checks are actually required
          CHECKS_INFO=""
          if [ -n "$REQUIRED_CHECKS" ]; then
            IFS=',' read -ra checks_array <<< "$REQUIRED_CHECKS"
            CHECKS_INFO="**Checks required:**"
            for check in "${checks_array[@]}"; do
              case "$check" in
                "pre-commit")
                  CHECKS_INFO="$CHECKS_INFO
          - ✅ Pre-commit hooks"
                  ;;
                "lint")
                  CHECKS_INFO="$CHECKS_INFO
          - ✅ Linting (flake8)"
                  ;;
                "test")
                  CHECKS_INFO="$CHECKS_INFO
          - ✅ Tests (pytest)"
                  ;;
                "build")
                  CHECKS_INFO="$CHECKS_INFO
          - ✅ Build completion"
                  ;;
                *)
                  CHECKS_INFO="$CHECKS_INFO
          - ✅ $check"
                  ;;
              esac
            done
          else
            CHECKS_INFO="**Checks required:**
          - ℹ️  No CI checks required for this change (YAML-only update)"
          fi

          gh pr comment "${{ github.event.pull_request.number }}" --body "🤖 **Auto-merge enabled**

          This Dependabot PR will be automatically merged once all required checks pass.

          **Version Update:**
          $VERSION_INFO

          $CHECKS_INFO

          If you need to make changes or prevent auto-merge, disable auto-merge on this PR."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip auto-merge notification
        if: steps.check-pr.outputs.skip == 'true'
        run: |
          echo "⏭️ Skipping auto-merge: ${{ steps.check-pr.outputs.reason }}"
          gh pr comment "${{ github.event.pull_request.number }}" --body "🤖 **Auto-merge skipped**

          Reason: ${{ steps.check-pr.outputs.reason }}

          This PR requires manual review and merging."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
