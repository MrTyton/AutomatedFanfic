name: Auto-merge Dependabot PRs

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: write
  pull-requests: write
  checks: read
  actions: write

jobs:
  auto-merge:
    # Only run on Dependabot PRs
    if: github.actor == 'dependabot[bot]'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Wait for CI checks to complete
        uses: lewagon/wait-on-check-action@v1.4.0
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: 'build' # This is the final job name from python-app.yml
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30
          allowed-conclusions: success

      - name: Check if PR is ready for auto-merge
        id: check-pr
        run: |
          # Get PR details
          PR_NUMBER=${{ github.event.pull_request.number }}
          
          # Check if PR is ready (not draft)
          if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "reason=Draft PR" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if PR has merge conflicts
          MERGEABLE="${{ github.event.pull_request.mergeable }}"
          if [ "$MERGEABLE" = "false" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "reason=Merge conflicts" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if this is a dependency update PR
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ "$PR_TITLE" =~ ^(deps|deps-dev|ci): ]]; then
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Auto-merge eligible: $PR_TITLE"
          else
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "reason=Not a dependency update" >> $GITHUB_OUTPUT
          fi

      - name: Determine version bump type
        if: steps.check-pr.outputs.skip != 'true'
        id: bump-type
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_BODY="${{ github.event.pull_request.body }}"
          
          # Check for security updates for special labeling
          if echo "$PR_TITLE $PR_BODY" | grep -qi "security\|vulnerability\|CVE"; then
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "bump_reason=security" >> $GITHUB_OUTPUT
            echo "üîí Security update detected - patch version bump"
          # All other dependency updates are treated as regular patches
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
            echo "bump_reason=dependency" >> $GITHUB_OUTPUT
            echo "üì¶ Dependency update detected - patch version bump"
          fi

      - name: Bump version for dependency updates
        if: steps.check-pr.outputs.skip != 'true'
        id: version-bump
        uses: ./.github/actions/bump-version
        with:
          bump-type: ${{ steps.bump-type.outputs.bump_type }}
          reason: ${{ steps.bump-type.outputs.bump_reason }}

      - name: Commit version bump
        if: steps.check-pr.outputs.skip != 'true' && steps.version-bump.outputs.version-changed == 'true'
        run: |
          # Configure git for commits
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Create commit message based on bump reason
          BUMP_REASON="${{ steps.bump-type.outputs.bump_reason }}"
          NEW_VERSION="${{ steps.version-bump.outputs.new-version }}"
          case "$BUMP_REASON" in
            "security")
              COMMIT_MSG="chore: bump version to $NEW_VERSION for security updates"
              ;;
            *)
              COMMIT_MSG="chore: bump version to $NEW_VERSION for dependency updates"
              ;;
          esac
          
          # Commit version bump
          git add release-versions/latest.txt root/app/fanficdownload.py
          git commit -m "$COMMIT_MSG"
          
          # Push the version bump to the PR branch
          git push origin HEAD

      - name: Enable auto-merge for Dependabot PRs
        if: steps.check-pr.outputs.skip != 'true'
        run: |
          # Enable auto-merge on the PR
          gh pr merge --auto --squash "${{ github.event.pull_request.number }}"
          echo "‚úÖ Auto-merge enabled for PR #${{ github.event.pull_request.number }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add auto-merge comment
        if: steps.check-pr.outputs.skip != 'true'
        run: |
          BUMP_REASON="${{ steps.bump-type.outputs.bump_reason }}"
          BUMP_TYPE="${{ steps.bump-type.outputs.bump_type }}"
          OLD_VERSION="${{ steps.version-bump.outputs.old-version }}"
          NEW_VERSION="${{ steps.version-bump.outputs.new-version }}"
          VERSION_CHANGED="${{ steps.version-bump.outputs.version-changed }}"
          
          case "$BUMP_REASON" in
            "security")
              BUMP_ICON="üîí"
              BUMP_DESC="Security update"
              ;;
            *)
              BUMP_ICON="üì¶"
              BUMP_DESC="Dependency update"
              ;;
          esac
          
          VERSION_INFO=""
          if [ "$VERSION_CHANGED" == "true" ]; then
            VERSION_INFO="- $BUMP_ICON **$BUMP_DESC**: Version bumped from \`$OLD_VERSION\` ‚Üí \`$NEW_VERSION\` (\`$BUMP_TYPE\` version bump)"
          else
            VERSION_INFO="- $BUMP_ICON **$BUMP_DESC**: Version remains \`$OLD_VERSION\` (no change needed)"
          fi
          
          gh pr comment "${{ github.event.pull_request.number }}" --body "ü§ñ **Auto-merge enabled**

          This Dependabot PR will be automatically merged once all required checks pass.
          
          **Version Update:**
          $VERSION_INFO
          
          **Checks required:**
          - ‚úÖ Linting (flake8)
          - ‚úÖ Tests (pytest)
          - ‚úÖ Build completion
          
          If you need to make changes or prevent auto-merge, disable auto-merge on this PR."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip auto-merge notification
        if: steps.check-pr.outputs.skip == 'true'
        run: |
          echo "‚è≠Ô∏è Skipping auto-merge: ${{ steps.check-pr.outputs.reason }}"
          gh pr comment "${{ github.event.pull_request.number }}" --body "ü§ñ **Auto-merge skipped**
          
          Reason: ${{ steps.check-pr.outputs.reason }}
          
          This PR requires manual review and merging."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
